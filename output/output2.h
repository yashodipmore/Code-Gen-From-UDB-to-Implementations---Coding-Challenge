/*
 * Generated C Header from RISC-V UDB YAML
 * Original file: output.yaml
 * Generated by: yaml_to_c.py
 */

#ifndef RISCV_INST_ADD_H
#define RISCV_INST_ADD_H

#include <stdint.h>

/* Encoding variable structure */
typedef struct {
    const char* name;
    const char* location;
} encoding_variable_t;

/* Access modes structure */
typedef struct {
    const char* s;      /* Supervisor mode */
    const char* u;      /* User mode */
    const char* vs;     /* Virtual supervisor mode */
    const char* vu;     /* Virtual user mode */
} access_modes_t;

/* Main instruction structure */
typedef struct {
    const char* schema;
    const char* kind;
    const char* name;
    const char* long_name;
    const char* description;
    const char* defined_by;
    const char* assembly;
    
    /* Encoding information */
    const char* encoding_match;
    encoding_variable_t encoding_variables[16];  /* Max 16 variables */
    int num_variables;
    
    /* Access modes */
    access_modes_t access;
    
    /* Timing and operations */
    int data_independent_timing;
    const char* operation;
    const char* sail_operation;
} riscv_instruction_t;

/* Global instruction data */
extern const riscv_instruction_t add_instruction;

/* Instruction data definition */
const riscv_instruction_t add_instruction = {
    .schema = "inst_schema.json#",
    .kind = "instruction",
    .name = "add",
    .long_name = "Add",
    .description = "The ADD instruction performs addition of two register values.\nIt adds the contents of registers rs1 and rs2 and stores the result in rd.\n\nThis is a basic arithmetic instruction that does not check for overflow.\n",
    .defined_by = "I",
    .assembly = "xd, xs1, xs2",
    
    /* Encoding */
    .encoding_match = "0000000----------000-----0110011",
    .encoding_variables = {
    { "xs2", "24-20" },
    { "xs1", "19-15" },
    { "xd", "11-7" },
        { NULL, NULL }  /* Sentinel */
    },
    .num_variables = 3,
    
    /* Access modes */
    .access = {
        .s = "always",
        .u = "always",
        .vs = "always",
        .vu = "always",
    },
    
    /* Timing and operations */
    .data_independent_timing = 1,
    .operation = "XReg src1 = X[xs1];\nXReg src2 = X[xs2];\nX[xd] = src1 + src2;\n",
    .sail_operation = "{\n  let rs1_val = X(rs1);\n  let rs2_val = X(rs2);\n  X(rd) = rs1_val + rs2_val;\n  RETIRE_SUCCESS\n}\n"
};

#endif /* RISCV_INST_ADD_H */
